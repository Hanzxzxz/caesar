// üëâ –ó–∞–¥–∞–Ω–∏–µ:
// - –ø–æ—Å–º–æ—Ç—Ä—Ç–∏—Ç–µ –≤–∏–¥—é—à–∫—É –ø—Ä–æ —à–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è https://www.youtube.com/watch?v=gF_YRW9-eLY
// - –¥–æ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é shift, —á—Ç–æ–±—ã –æ–Ω–∞ "—Å–º–µ—â–∞–ª–∞" –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∑–∞–¥–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª char –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ distance –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –≤–∏–¥–µ–æ
// –ø–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–µ—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
// –í–ê–ñ–ù–û: –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –æ—Å—Ç–∞–≤–ª—è—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
// —Ö—á—ä –ª—ä—ç—Ö—ë—Å! ;)

function shift(char, distance) {
  const alphabet = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è".split("");
  if (distance >= alphabet.length) {
    throw new Error("distance is too big, max is " + (alphabet.length - 1));
  }
  let encrypted = "";
  let shiftedAlphabet = "";
  let newChar;
  for (let i = 0; i < alphabet.length; i++) {
    newChar =
      alphabet[i + distance] === undefined
        ? alphabet[i + distance - alphabet.length]
        : alphabet[i + distance];
    shiftedAlphabet = shiftedAlphabet.concat(newChar);
  }
  let indexOfChar = alphabet.indexOf(char);
  encrypted =
    indexOfChar == -1 ? char : encrypted.concat(shiftedAlphabet[indexOfChar]);

  // üëâ –≤–æ—Ç —Ç—É—Ç —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞—à –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π "—Å–¥–≤–∏–≥–∞–µ—Ç" char –Ω–∞ –∑–∞–¥–¥–∞–Ω–Ω–æ–µ
  // "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ" (distance) –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É. —Ç.–µ. –µ—Å–ª–∏ char == '–∞' –∏ distance == 1
  // —Ç–æ encrypted –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–±'
  // –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ - —Ç–æ encrypted –¥–æ–ª–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω—å —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É,
  // –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

  return encrypted;
}

function caesar(text, key) {
  const allChars = text.split("");
  let result = "";
  for (var i = 0; i < allChars.length; i++) {
    result = result + shift(allChars[i], key);
  }
  return result;
}

/////////////////////////  –ø–æ–∑–¥—Ä–∞–≤–ª—è—é, —ç—Ç–æ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ —ç—Ç–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏, –¥–∞–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç  //////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
mocha.setup("bdd");
var assert = chai.assert;

describe("caesar cipher", () => {
  it("–∞ => –± –µ—Å–ª–∏ distance == 1", () => {
    assert.equal(shift("–∞", 1), "–±");
  });
  it("—è => –∞ –µ—Å–ª–∏ distance == 1", () => {
    assert.equal(shift("—è", 1), "–∞");
  });
  it("! => ! –ø—Ä–∏ –ª—é–±–æ–º distance", () => {
    assert.equal(shift("!", Math.floor(Math.random() * 32)), "!");
  });
  it("–∞–±–≤ => –±–≤–≥ –µ—Å–ª–∏ key == 1", () => {
    assert.equal(caesar("–∞–±–≤", 1), "–±–≤–≥");
  });
  it("–≤–æ—Ç —ç—Ç–æ –¥–∞! => —á–¥–∑ —Ç–∑–¥ —â—Ö! –µ—Å–ª–∏ key == 22", () => {
    assert.equal(caesar("–≤–æ—Ç —ç—Ç–æ –¥–∞!", 22), "—á–¥–∑ —Ç–∑–¥ —â—Ö!");
  });
});

mocha.run();